<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  
  
  <title>函数式编程 | Hexo</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="description" content="函数式编程JavaScript 语言从一诞生，就具有函数式编程的烙印。它将函数作为一种独立的数据类型，与其他数据类型处于完全平等的地位。在 JavaScript 语言中，你可以采用面向对象编程，也可以采用函数式编程。有人甚至说，JavaScript 是有史以来第一种被大规模采用的函数式编程语言。">
<meta property="og:type" content="article">
<meta property="og:title" content="函数式编程">
<meta property="og:url" content="http://example.com/pages/1cf50330655efc69">
<meta property="og:site_name" content="Hexo">
<meta property="og:description" content="函数式编程JavaScript 语言从一诞生，就具有函数式编程的烙印。它将函数作为一种独立的数据类型，与其他数据类型处于完全平等的地位。在 JavaScript 语言中，你可以采用面向对象编程，也可以采用函数式编程。有人甚至说，JavaScript 是有史以来第一种被大规模采用的函数式编程语言。">
<meta property="og:locale" content="en_US">
<meta property="article:published_time" content="2020-02-09T08:00:30.000Z">
<meta property="article:modified_time" content="2024-10-11T00:29:23.909Z">
<meta property="article:author" content="John Doe">
<meta name="twitter:card" content="summary">
  
    <link rel="alternate" href="/atom.xml" title="Hexo" type="application/atom+xml">
  
  
    <link rel="shortcut icon" href="/favicon.png">
  
  
  
<link rel="stylesheet" href="/css/style.css">

  
    
<link rel="stylesheet" href="/fancybox/jquery.fancybox.min.css">

  
  
<meta name="generator" content="Hexo 7.3.0"></head>

<body>
  <div id="container">
    <div id="wrap">
      <header id="header">
  <div id="banner"></div>
  <div id="header-outer" class="outer">
    <div id="header-title" class="inner">
      <h1 id="logo-wrap">
        <a href="/" id="logo">Hexo</a>
      </h1>
      
    </div>
    <div id="header-inner" class="inner">
      <nav id="main-nav">
        <a id="main-nav-toggle" class="nav-icon"><span class="fa fa-bars"></span></a>
        
          <a class="main-nav-link" href="/">Home</a>
        
          <a class="main-nav-link" href="/archives">Archives</a>
        
      </nav>
      <nav id="sub-nav">
        
        
          <a class="nav-icon" href="/atom.xml" title="RSS Feed"><span class="fa fa-rss"></span></a>
        
        <a class="nav-icon nav-search-btn" title="Search"><span class="fa fa-search"></span></a>
      </nav>
      <div id="search-form-wrap">
        <form action="//google.com/search" method="get" accept-charset="UTF-8" class="search-form"><input type="search" name="q" class="search-form-input" placeholder="Search"><button type="submit" class="search-form-submit">&#xF002;</button><input type="hidden" name="sitesearch" value="http://example.com"></form>
      </div>
    </div>
  </div>
</header>

      <div class="outer">
        <section id="main"><article id="post-31.函数式编程" class="h-entry article article-type-post" itemprop="blogPost" itemscope itemtype="https://schema.org/BlogPosting">
  <div class="article-meta">
    <a href="/pages/1cf50330655efc69" class="article-date">
  <time class="dt-published" datetime="2020-02-09T08:00:30.000Z" itemprop="datePublished">2020-02-09</time>
</a>
    
  <div class="article-category">
    <a class="article-category-link" href="/categories/%E3%80%8AES6-%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/">《ES6 教程》笔记</a>
  </div>

  </div>
  <div class="article-inner">
    
    
      <header class="article-header">
        
  
    <h1 class="p-name article-title" itemprop="headline name">
      函数式编程
    </h1>
  

      </header>
    
    <div class="e-content article-entry" itemprop="articleBody">
      
        <h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><p>JavaScript 语言从一诞生，就具有函数式编程的烙印。它将函数作为一种独立的数据类型，与其他数据类型处于完全平等的地位。在 JavaScript 语言中，你可以采用面向对象编程，也可以采用函数式编程。有人甚至说，JavaScript 是有史以来第一种被大规模采用的函数式编程语言。</p>
<span id="more"></span>
<p>ES6 的种种新增功能，使得函数式编程变得更方便、更强大。本章介绍 ES6 如何进行函数式编程。</p>
<h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><p>柯里化（currying）指的是将一个多参数的函数拆分成一系列函数，每个拆分后的函数都只接受一个参数（unary）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">1</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，函数<code>add</code>接受两个参数<code>a</code>和<code>b</code>。</p>
<p>柯里化就是将上面的函数拆分成两个函数，每个函数都只接受一个参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span> (<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者采用箭头函数写法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = x =&gt; <span class="function"><span class="params">y</span> =&gt;</span> x + y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = <span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，函数<code>add</code>只接受一个参数<code>a</code>，返回一个函数<code>f</code>。函数<code>f</code>也只接受一个参数<code>b</code>。</p>
<h2 id="函数合成"><a href="#函数合成" class="headerlink" title="函数合成"></a>函数合成</h2><p>函数合成（function composition）指的是，将多个函数合成一个函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">compose</span> = f =&gt; <span class="function"><span class="params">g</span> =&gt;</span> <span class="function"><span class="params">x</span> =&gt;</span> <span class="title function_">f</span>(<span class="title function_">g</span>(x));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = <span class="title function_">compose</span> (<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">4</span>) (<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">3</span>);</span><br><span class="line"><span class="title function_">f</span>(<span class="number">2</span>) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>compose</code>就是一个函数合成器，用于将两个函数合成一个函数。</p>
<p>可以发现，柯里化与函数合成有着密切的联系。前者用于将一个函数拆成多个函数，后者用于将多个函数合并成一个函数。</p>
<h2 id="参数倒置"><a href="#参数倒置" class="headerlink" title="参数倒置"></a>参数倒置</h2><p>参数倒置（flip）指的是改变函数前两个参数的顺序。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">divide</span> = (<span class="params">a, b</span>) =&gt; a / b;</span><br><span class="line"><span class="keyword">var</span> flip = f.<span class="title function_">flip</span>(divide);</span><br><span class="line"></span><br><span class="line"><span class="title function_">flip</span>(<span class="number">10</span>, <span class="number">5</span>) <span class="comment">// 0.5</span></span><br><span class="line"><span class="title function_">flip</span>(<span class="number">1</span>, <span class="number">10</span>) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">three</span> = (<span class="params">a, b, c</span>) =&gt; [a, b, c];</span><br><span class="line"><span class="keyword">var</span> flip = f.<span class="title function_">flip</span>(three);</span><br><span class="line"><span class="title function_">flip</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// =&gt; [2, 1, 3]</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，如果按照正常的参数顺序，10 除以 5 等于 2。但是，参数倒置以后得到的新函数，结果就是 5 除以 10，结果得到 0.5。如果原函数有 3 个参数，则只颠倒前两个参数的位置。</p>
<p>参数倒置的代码非常简单。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = &#123;&#125;;</span><br><span class="line">f.<span class="property">flip</span> =</span><br><span class="line">  <span class="function"><span class="params">fn</span> =&gt;</span></span><br><span class="line">    <span class="function">(<span class="params">a, b, ...args</span>) =&gt;</span> <span class="title function_">fn</span>(b, a, ...args.<span class="title function_">reverse</span>());</span><br></pre></td></tr></table></figure>

<h2 id="执行边界"><a href="#执行边界" class="headerlink" title="执行边界"></a>执行边界</h2><p>执行边界（until）指的是函数执行到满足条件为止。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">condition</span> = x =&gt; x &gt; <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">inc</span> = x =&gt; x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> until = f.<span class="title function_">until</span>(condition, inc);</span><br><span class="line"></span><br><span class="line"><span class="title function_">until</span>(<span class="number">0</span>) <span class="comment">// 101</span></span><br><span class="line"></span><br><span class="line">condition = <span class="function"><span class="params">x</span> =&gt;</span> x === <span class="number">5</span>;</span><br><span class="line">until = f.<span class="title function_">until</span>(condition, inc);</span><br><span class="line"></span><br><span class="line"><span class="title function_">until</span>(<span class="number">3</span>) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，第一段的条件是执行到<code>x</code>大于 100 为止，所以<code>x</code>初值为 0 时，会一直执行到 101。第二段的条件是执行到等于 5 为止，所以<code>x</code>最后的值是 5。</p>
<p>执行边界的实现如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = &#123;&#125;;</span><br><span class="line">f.<span class="property">until</span> = <span class="function">(<span class="params">condition, f</span>) =&gt;</span></span><br><span class="line">  <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> r = f.<span class="title function_">apply</span>(<span class="literal">null</span>, args);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">condition</span>(r) ? r : f.<span class="title function_">until</span>(condition, f)(r);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码的关键就是，如果满足条件就返回结果，否则不断递归执行。</p>
<h2 id="队列操作"><a href="#队列操作" class="headerlink" title="队列操作"></a>队列操作</h2><p>队列（list）操作包括以下几种。</p>
<ul>
<li><code>head</code>： 取出队列的第一个非空成员。</li>
<li><code>last</code>： 取出有限队列的最后一个非空成员。</li>
<li><code>tail</code>： 取出除了“队列头”以外的其他非空成员。</li>
<li><code>init</code>： 取出除了“队列尾”以外的其他非空成员。</li>
</ul>
<p>下面是例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f.<span class="title function_">head</span>(<span class="number">5</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">1</span>) <span class="comment">// 5</span></span><br><span class="line">f.<span class="title function_">last</span>(<span class="number">5</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">1</span>) <span class="comment">// 1</span></span><br><span class="line">f.<span class="title function_">tail</span>(<span class="number">5</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">1</span>) <span class="comment">// [27, 3, 1]</span></span><br><span class="line">f.<span class="title function_">init</span>(<span class="number">5</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">1</span>) <span class="comment">// [5, 27, 3]</span></span><br></pre></td></tr></table></figure>

<p>这些方法的实现如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = &#123;&#125;;</span><br><span class="line">f.<span class="property">head</span> = <span class="function">(<span class="params">...xs</span>) =&gt;</span> xs[<span class="number">0</span>];</span><br><span class="line">f.<span class="property">last</span> = <span class="function">(<span class="params">...xs</span>) =&gt;</span> xs.<span class="title function_">slice</span>(-<span class="number">1</span>);</span><br><span class="line">f.<span class="property">tail</span> = <span class="function">(<span class="params">...xs</span>) =&gt;</span> <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(xs, <span class="number">1</span>);</span><br><span class="line">f.<span class="property">init</span> = <span class="function">(<span class="params">...xs</span>) =&gt;</span> xs.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h2 id="合并操作"><a href="#合并操作" class="headerlink" title="合并操作"></a>合并操作</h2><p>合并操作分为<code>concat</code>和<code>concatMap</code>两种。前者就是将多个数组合成一个，后者则是先处理一下参数，然后再将处理结果合成一个数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f.<span class="title function_">concat</span>([<span class="number">5</span>], [<span class="number">27</span>], [<span class="number">3</span>]) <span class="comment">// [5, 27, 3]</span></span><br><span class="line">f.<span class="title function_">concatMap</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="string">&#x27;hi &#x27;</span> + x, <span class="number">1</span>, [[<span class="number">2</span>]], <span class="number">3</span>) <span class="comment">// [&#x27;hi 1&#x27;, &#x27;hi 2&#x27;, &#x27;hi 3&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>这两种方法的实现代码如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = &#123;&#125;;</span><br><span class="line">f.<span class="property">concat</span> =</span><br><span class="line">  <span class="function">(<span class="params">...xs</span>) =&gt;</span> xs.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="title function_">concat</span>(b));</span><br><span class="line">f.<span class="property">concatMap</span> =</span><br><span class="line">  <span class="function">(<span class="params">f, ...xs</span>) =&gt;</span> f.<span class="title function_">concat</span>(xs.<span class="title function_">map</span>(f));</span><br></pre></td></tr></table></figure>

<h2 id="配对操作"><a href="#配对操作" class="headerlink" title="配对操作"></a>配对操作</h2><p>配对操作分为<code>zip</code>和<code>zipWith</code>两种方法。<code>zip</code>操作将两个队列的成员，一一配对，合成一个新的队列。如果两个队列不等长，较长的那个队列多出来的成员，会被忽略。<code>zipWith</code>操作的第一个参数是一个函数，然后会将后面的队列成员一一配对，输入该函数，返回值就组成一个新的队列。</p>
<p>下面是例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> c = [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">f.<span class="title function_">zip</span>(a, b) <span class="comment">// [[0, 3], [1, 4], [2, 5]]</span></span><br><span class="line">f.<span class="title function_">zipWith</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, a, b, c) <span class="comment">// [9, 12, 15]</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>zipWith</code>方法的第一个参数是一个求和函数，它将后面三个队列的成员，一一配对进行相加。</p>
<p>这两个方法的实现如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">f.<span class="property">zip</span> = <span class="function">(<span class="params">...xs</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> r = [];</span><br><span class="line">  <span class="keyword">let</span> nple = [];</span><br><span class="line">  <span class="keyword">let</span> length = <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, xs.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="property">length</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    xs.<span class="title function_">forEach</span>(</span><br><span class="line">      <span class="function"><span class="params">x</span> =&gt;</span> nple.<span class="title function_">push</span>(x[i])</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    r.<span class="title function_">push</span>(nple);</span><br><span class="line">    nple = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">f.<span class="property">zipWith</span> = <span class="function">(<span class="params">op, ...xs</span>) =&gt;</span></span><br><span class="line">  f.<span class="property">zip</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, xs).<span class="title function_">map</span>(</span><br><span class="line">    <span class="function">(<span class="params">x</span>) =&gt;</span> x.<span class="title function_">reduce</span>(op)</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>Mateo Gianolio, <a target="_blank" rel="noopener" href="http://casualjavascript.com/?1">Haskell in ES6: Part 1</a></li>
</ul>

      
    </div>
    <footer class="article-footer">
      <a data-url="http://example.com/pages/1cf50330655efc69" data-id="cm2n1iutc00249sr36fsu06xu" data-title="函数式编程" class="article-share-link"><span class="fa fa-share">Share</span></a>
      
      
      
    </footer>
  </div>
  
    
<nav id="article-nav">
  
    <a href="/pages/e97bc1e5626b082c" id="article-nav-newer" class="article-nav-link-wrap">
      <strong class="article-nav-caption">Newer</strong>
      <div class="article-nav-title">
        
          装饰器
        
      </div>
    </a>
  
  
    <a href="/pages/6a8e2dc558da1b39" id="article-nav-older" class="article-nav-link-wrap">
      <strong class="article-nav-caption">Older</strong>
      <div class="article-nav-title">Mixin</div>
    </a>
  
</nav>

  
</article>


</section>
        
          <aside id="sidebar">
  
    
  <div class="widget-wrap">
    <h3 class="widget-title">Categories</h3>
    <div class="widget">
      <ul class="category-list"><li class="category-list-item"><a class="category-list-link" href="/categories/%E3%80%8AES6-%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/">《ES6 教程》笔记</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E3%80%8AJavaScript%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/">《JavaScript教程》笔记</a></li></ul>
    </div>
  </div>


  
    

  
    
  
    
  <div class="widget-wrap">
    <h3 class="widget-title">Archives</h3>
    <div class="widget">
      <ul class="archive-list"><li class="archive-list-item"><a class="archive-list-link" href="/archives/2024/10/">October 2024</a></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2020/02/">February 2020</a></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2020/01/">January 2020</a></li></ul>
    </div>
  </div>


  
    
  <div class="widget-wrap">
    <h3 class="widget-title">Recent Posts</h3>
    <div class="widget">
      <ul>
        
          <li>
            <a href="/2024/10/24/hello-world/">Hello World</a>
          </li>
        
          <li>
            <a href="/2024/10/11/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8Bnew%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/">(no title)</a>
          </li>
        
          <li>
            <a href="/2024/10/11/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8Bcall%E5%92%8Capply%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/">(no title)</a>
          </li>
        
          <li>
            <a href="/2024/10/11/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8Bbind%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/">(no title)</a>
          </li>
        
          <li>
            <a href="/2024/10/11/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/">(no title)</a>
          </li>
        
      </ul>
    </div>
  </div>

  
</aside>
        
      </div>
      <footer id="footer">
  
  <div class="outer">
    <div id="footer-info" class="inner">
      
      &copy; 2024 John Doe<br>
      Powered by <a href="https://hexo.io/" target="_blank">Hexo</a>
    </div>
  </div>
</footer>

    </div>
    <nav id="mobile-nav">
  
    <a href="/" class="mobile-nav-link">Home</a>
  
    <a href="/archives" class="mobile-nav-link">Archives</a>
  
</nav>
    


<script src="/js/jquery-3.6.4.min.js"></script>



  
<script src="/fancybox/jquery.fancybox.min.js"></script>




<script src="/js/script.js"></script>





  </div>
</body>
</html>