<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  
  
  <title>最新提案 | Hexo</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="description" content="最新提案本章介绍一些尚未进入标准、但很有希望的最新提案。 do 表达式本质上，块级作用域是一个语句，将多个操作封装在一起，没有返回值。 1234&#123;  let t &#x3D; f();  t &#x3D; t * t + 1;&#125;">
<meta property="og:type" content="article">
<meta property="og:title" content="最新提案">
<meta property="og:url" content="http://example.com/pages/7188882b8d65af1b">
<meta property="og:site_name" content="Hexo">
<meta property="og:description" content="最新提案本章介绍一些尚未进入标准、但很有希望的最新提案。 do 表达式本质上，块级作用域是一个语句，将多个操作封装在一起，没有返回值。 1234&#123;  let t &#x3D; f();  t &#x3D; t * t + 1;&#125;">
<meta property="og:locale" content="en_US">
<meta property="article:published_time" content="2020-02-09T08:00:30.000Z">
<meta property="article:modified_time" content="2024-10-11T00:29:23.333Z">
<meta property="article:author" content="John Doe">
<meta name="twitter:card" content="summary">
  
    <link rel="alternate" href="/atom.xml" title="Hexo" type="application/atom+xml">
  
  
    <link rel="shortcut icon" href="/favicon.png">
  
  
  
<link rel="stylesheet" href="/css/style.css">

  
    
<link rel="stylesheet" href="/fancybox/jquery.fancybox.min.css">

  
  
<meta name="generator" content="Hexo 7.3.0"></head>

<body>
  <div id="container">
    <div id="wrap">
      <header id="header">
  <div id="banner"></div>
  <div id="header-outer" class="outer">
    <div id="header-title" class="inner">
      <h1 id="logo-wrap">
        <a href="/" id="logo">Hexo</a>
      </h1>
      
    </div>
    <div id="header-inner" class="inner">
      <nav id="main-nav">
        <a id="main-nav-toggle" class="nav-icon"><span class="fa fa-bars"></span></a>
        
          <a class="main-nav-link" href="/">Home</a>
        
          <a class="main-nav-link" href="/archives">Archives</a>
        
      </nav>
      <nav id="sub-nav">
        
        
          <a class="nav-icon" href="/atom.xml" title="RSS Feed"><span class="fa fa-rss"></span></a>
        
        <a class="nav-icon nav-search-btn" title="Search"><span class="fa fa-search"></span></a>
      </nav>
      <div id="search-form-wrap">
        <form action="//google.com/search" method="get" accept-charset="UTF-8" class="search-form"><input type="search" name="q" class="search-form-input" placeholder="Search"><button type="submit" class="search-form-submit">&#xF002;</button><input type="hidden" name="sitesearch" value="http://example.com"></form>
      </div>
    </div>
  </div>
</header>

      <div class="outer">
        <section id="main"><article id="post-29.最新提案" class="h-entry article article-type-post" itemprop="blogPost" itemscope itemtype="https://schema.org/BlogPosting">
  <div class="article-meta">
    <a href="/pages/7188882b8d65af1b" class="article-date">
  <time class="dt-published" datetime="2020-02-09T08:00:30.000Z" itemprop="datePublished">2020-02-09</time>
</a>
    
  <div class="article-category">
    <a class="article-category-link" href="/categories/%E3%80%8AES6-%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/">《ES6 教程》笔记</a>
  </div>

  </div>
  <div class="article-inner">
    
    
      <header class="article-header">
        
  
    <h1 class="p-name article-title" itemprop="headline name">
      最新提案
    </h1>
  

      </header>
    
    <div class="e-content article-entry" itemprop="articleBody">
      
        <h1 id="最新提案"><a href="#最新提案" class="headerlink" title="最新提案"></a>最新提案</h1><p>本章介绍一些尚未进入标准、但很有希望的最新提案。</p>
<h2 id="do-表达式"><a href="#do-表达式" class="headerlink" title="do 表达式"></a>do 表达式</h2><p>本质上，块级作用域是一个语句，将多个操作封装在一起，没有返回值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> t = <span class="title function_">f</span>();</span><br><span class="line">  t = t * t + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>上面代码中，块级作用域将两个语句封装在一起。但是，在块级作用域以外，没有办法得到<code>t</code>的值，因为块级作用域不返回值，除非<code>t</code>是全局变量。</p>
<p>现在有一个<a target="_blank" rel="noopener" href="https://github.com/tc39/proposal-do-expressions">提案</a>，使得块级作用域可以变为表达式，也就是说可以返回值，办法就是在块级作用域之前加上<code>do</code>，使它变为<code>do</code>表达式，然后就会返回内部最后执行的表达式的值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> t = <span class="title function_">f</span>();</span><br><span class="line">  t * t + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码中，变量<code>x</code>会得到整个块级作用域的返回值（<code>t * t + 1</code>）。</p>
<p><code>do</code>表达式的逻辑非常简单：封装的是什么，就会返回什么。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等同于 &lt;表达式&gt;</span></span><br><span class="line"><span class="keyword">do</span> &#123; &lt;表达式&gt;; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于 &lt;语句&gt;</span></span><br><span class="line"><span class="keyword">do</span> &#123; &lt;语句&gt; &#125;</span><br></pre></td></tr></table></figure>

<p><code>do</code>表达式的好处是可以封装多个语句，让程序更加模块化，就像乐高积木那样一块块拼装起来。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">foo</span>()) &#123; <span class="title function_">f</span>() &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">bar</span>()) &#123; <span class="title function_">g</span>() &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123; <span class="title function_">h</span>() &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码的本质，就是根据函数<code>foo</code>的执行结果，调用不同的函数，将返回结果赋给变量<code>x</code>。使用<code>do</code>表达式，就将这个操作的意图表达得非常简洁清晰。而且，<code>do</code>块级作用域提供了单独的作用域，内部操作可以与全局作用域隔绝。</p>
<p>值得一提的是，<code>do</code>表达式在 JSX 语法中非常好用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;</span></span><br><span class="line"><span class="language-xml">      do &#123;</span></span><br><span class="line"><span class="language-xml">        if (loggedIn) &#123;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">LogoutButton</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#125; else &#123;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">LoginButton</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>上面代码中，如果不用<code>do</code>表达式，就只能用三元判断运算符（<code>?:</code>）。那样的话，一旦判断逻辑复杂，代码就会变得很不易读。</p>
<h2 id="throw-表达式"><a href="#throw-表达式" class="headerlink" title="throw 表达式"></a>throw 表达式</h2><p>JavaScript 语法规定<code>throw</code>是一个命令，用来抛出错误，不能用于表达式之中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>());</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>console.log</code>的参数必须是一个表达式，如果是一个<code>throw</code>语句就会报错。</p>
<p>现在有一个<a target="_blank" rel="noopener" href="https://github.com/tc39/proposal-throw-expressions">提案</a>，允许<code>throw</code>用于表达式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数的默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">save</span>(<span class="params">filename = <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Argument required&quot;</span>)</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数的返回值</span></span><br><span class="line"><span class="title function_">lint</span>(ast, &#123;</span><br><span class="line">  <span class="attr">with</span>: <span class="function">() =&gt;</span> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;avoid using &#x27;with&#x27; statements.&quot;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件表达式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getEncoder</span>(<span class="params">encoding</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> encoder = encoding === <span class="string">&quot;utf8&quot;</span> ?</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">UTF8Encoder</span>() :</span><br><span class="line">    encoding === <span class="string">&quot;utf16le&quot;</span> ?</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">UTF16Encoder</span>(<span class="literal">false</span>) :</span><br><span class="line">      encoding === <span class="string">&quot;utf16be&quot;</span> ?</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">UTF16Encoder</span>(<span class="literal">true</span>) :</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unsupported encoding&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑表达式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">id</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_id</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">id</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_id</span> = value || <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Invalid value&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>throw</code>都出现在表达式里面。</p>
<p>语法上，<code>throw</code>表达式里面的<code>throw</code>不再是一个命令，而是一个运算符。为了避免与<code>throw</code>命令混淆，规定<code>throw</code>出现在行首，一律解释为<code>throw</code>语句，而不是<code>throw</code>表达式。</p>
<h2 id="函数的部分执行"><a href="#函数的部分执行" class="headerlink" title="函数的部分执行"></a>函数的部分执行</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>多参数的函数有时需要绑定其中的一个或多个参数，然后返回一个新函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123; <span class="keyword">return</span> x + y; &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add7</span>(<span class="params">x</span>) &#123; <span class="keyword">return</span> x + <span class="number">7</span>; &#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>add7</code>函数其实是<code>add</code>函数的一个特殊版本，通过将一个参数绑定为<code>7</code>，就可以从<code>add</code>得到<code>add7</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bind 方法</span></span><br><span class="line"><span class="keyword">const</span> add7 = add.<span class="title function_">bind</span>(<span class="literal">null</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add7</span> = x =&gt; <span class="title function_">add</span>(x, <span class="number">7</span>);</span><br></pre></td></tr></table></figure>

<p>上面两种写法都有些冗余。其中，<code>bind</code>方法的局限更加明显，它必须提供<code>this</code>，并且只能从前到后一个个绑定参数，无法只绑定非头部的参数。</p>
<p>现在有一个<a target="_blank" rel="noopener" href="https://github.com/tc39/proposal-partial-application">提案</a>，使得绑定参数并返回一个新函数更加容易。这叫做函数的部分执行（partial application）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">x, y</span>) =&gt; x + y;</span><br><span class="line"><span class="keyword">const</span> addOne = <span class="title function_">add</span>(<span class="number">1</span>, ?);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> maxGreaterThanZero = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, ...);</span><br></pre></td></tr></table></figure>

<p>根据新提案，<code>?</code>是单个参数的占位符，<code>...</code>是多个参数的占位符。以下的形式都属于函数的部分执行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">f</span>(x, ?)</span><br><span class="line"><span class="title function_">f</span>(x, ...)</span><br><span class="line"><span class="title function_">f</span>(?, x)</span><br><span class="line"><span class="title function_">f</span>(..., x)</span><br><span class="line"><span class="title function_">f</span>(?, x, ?)</span><br><span class="line"><span class="title function_">f</span>(..., x, ...)</span><br></pre></td></tr></table></figure>

<p><code>?</code>和<code>...</code>只能出现在函数的调用之中，并且会返回一个新函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> g = <span class="title function_">f</span>(?, <span class="number">1</span>, ...);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">g</span> = (<span class="params">x, ...y</span>) =&gt; <span class="title function_">f</span>(x, <span class="number">1</span>, ...y);</span><br></pre></td></tr></table></figure>

<p>函数的部分执行，也可以用于对象的方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="title function_">f</span>(<span class="params">x, y</span>) &#123; <span class="keyword">return</span> x + y; &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = obj.<span class="title function_">f</span>(?, <span class="number">3</span>);</span><br><span class="line"><span class="title function_">g</span>(<span class="number">1</span>) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>函数的部分执行有一些特别注意的地方。</p>
<p>（1）函数的部分执行是基于原函数的。如果原函数发生变化，部分执行生成的新函数也会立即反映这种变化。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">f</span> = (<span class="params">x, y</span>) =&gt; x + y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = <span class="title function_">f</span>(?, <span class="number">3</span>);</span><br><span class="line"><span class="title function_">g</span>(<span class="number">1</span>); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换函数 f</span></span><br><span class="line">f = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x * y;</span><br><span class="line"></span><br><span class="line"><span class="title function_">g</span>(<span class="number">1</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，定义了函数的部分执行以后，更换原函数会立即影响到新函数。</p>
<p>（2）如果预先提供的那个值是一个表达式，那么这个表达式并不会在定义时求值，而是在每次调用时求值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">x, y</span>) =&gt; x + y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = <span class="title function_">f</span>(?, a);</span><br><span class="line"><span class="title function_">g</span>(<span class="number">1</span>); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变 a 的值</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">g</span>(<span class="number">1</span>); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，预先提供的参数是变量<code>a</code>，那么每次调用函数<code>g</code>的时候，才会对<code>a</code>进行求值。</p>
<p>（3）如果新函数的参数多于占位符的数量，那么多余的参数将被忽略。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">x, ...y</span>) =&gt; [x, ...y];</span><br><span class="line"><span class="keyword">const</span> g = <span class="title function_">f</span>(?, <span class="number">1</span>);</span><br><span class="line"><span class="title function_">g</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// [2, 1]</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，函数<code>g</code>只有一个占位符，也就意味着它只能接受一个参数，多余的参数都会被忽略。</p>
<p>写成下面这样，多余的参数就没有问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">x, ...y</span>) =&gt; [x, ...y];</span><br><span class="line"><span class="keyword">const</span> g = <span class="title function_">f</span>(?, <span class="number">1</span>, ...);</span><br><span class="line"><span class="title function_">g</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// [2, 1, 3, 4];</span></span><br></pre></td></tr></table></figure>

<p>（4）<code>...</code>只会被采集一次，如果函数的部分执行使用了多个<code>...</code>，那么每个<code>...</code>的值都将相同。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">...x</span>) =&gt; x;</span><br><span class="line"><span class="keyword">const</span> g = <span class="title function_">f</span>(..., <span class="number">9</span>, ...);</span><br><span class="line"><span class="title function_">g</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3, 9, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>g</code>定义了两个<code>...</code>占位符，真正执行的时候，它们的值是一样的。</p>
<h2 id="管道运算符"><a href="#管道运算符" class="headerlink" title="管道运算符"></a>管道运算符</h2><p>Unix 操作系统有一个管道机制（pipeline），可以把前一个操作的值传给后一个操作。这个机制非常有用，使得简单的操作可以组合成为复杂的操作。许多语言都有管道的实现，现在有一个<a target="_blank" rel="noopener" href="https://github.com/tc39/proposal-pipeline-operator">提案</a>，让 JavaScript 也拥有管道机制。</p>
<p>JavaScript 的管道是一个运算符，写作<code>|&gt;</code>。它的左边是一个表达式，右边是一个函数。管道运算符把左边表达式的值，传入右边的函数进行求值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x |&gt; f</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="title function_">f</span>(x)</span><br></pre></td></tr></table></figure>

<p>管道运算符最大的好处，就是可以把嵌套的函数，写成从左到右的链式表达式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doubleSay</span> (<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str + <span class="string">&quot;, &quot;</span> + str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">capitalize</span> (<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str[<span class="number">0</span>].<span class="title function_">toUpperCase</span>() + str.<span class="title function_">substring</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">exclaim</span> (<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str + <span class="string">&#x27;!&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面是三个简单的函数。如果要嵌套执行，传统的写法和管道的写法分别如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统的写法</span></span><br><span class="line"><span class="title function_">exclaim</span>(<span class="title function_">capitalize</span>(<span class="title function_">doubleSay</span>(<span class="string">&#x27;hello&#x27;</span>)))</span><br><span class="line"><span class="comment">// &quot;Hello, hello!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 管道的写法</span></span><br><span class="line"><span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  |&gt; doubleSay</span><br><span class="line">  |&gt; capitalize</span><br><span class="line">  |&gt; exclaim</span><br><span class="line"><span class="comment">// &quot;Hello, hello!&quot;</span></span><br></pre></td></tr></table></figure>

<p>管道运算符只能传递一个值，这意味着它右边的函数必须是一个单参数函数。如果是多参数函数，就必须进行柯里化，改成单参数的版本。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">double</span> (<span class="params">x</span>) &#123; <span class="keyword">return</span> x + x; &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span> (<span class="params">x, y</span>) &#123; <span class="keyword">return</span> x + y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">score</span>: <span class="number">25</span> &#125;;</span><br><span class="line">person.<span class="property">score</span></span><br><span class="line">  |&gt; double</span><br><span class="line">  |&gt; (<span class="function"><span class="params">_</span> =&gt;</span> <span class="title function_">add</span>(<span class="number">7</span>, _))</span><br><span class="line"><span class="comment">// 57</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>add</code>函数需要两个参数。但是，管道运算符只能传入一个值，因此需要事先提供另一个参数，并将其改成单参数的箭头函数<code>_ =&gt; add(7, _)</code>。这个函数里面的下划线并没有特别的含义，可以用其他符号代替，使用下划线只是因为，它能够形象地表示这里是占位符。</p>
<p>管道运算符对于<code>await</code>函数也适用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x |&gt; <span class="keyword">await</span> f</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">f</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userAge = userId |&gt; <span class="keyword">await</span> fetchUserById |&gt; getAgeFromUser;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> userAge = <span class="title function_">getAgeFromUser</span>(<span class="keyword">await</span> <span class="title function_">fetchUserById</span>(userId));</span><br></pre></td></tr></table></figure>

<h2 id="数值分隔符"><a href="#数值分隔符" class="headerlink" title="数值分隔符"></a>数值分隔符</h2><p>欧美语言中，较长的数值允许每三位添加一个分隔符（通常是一个逗号），增加数值的可读性。比如，<code>1000</code>可以写作<code>1,000</code>。</p>
<p>现在有一个<a target="_blank" rel="noopener" href="https://github.com/tc39/proposal-numeric-separator">提案</a>，允许 JavaScript 的数值使用下划线（<code>_</code>）作为分隔符。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> budget = <span class="number">1_000_000_000_000</span>;</span><br><span class="line">budget === <span class="number">10</span> ** <span class="number">12</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>JavaScript 的数值分隔符没有指定间隔的位数，也就是说，可以每三位添加一个分隔符，也可以每一位、每两位、每四位添加一个。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123_00</span> === <span class="number">12_300</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="number">12345_00</span> === <span class="number">123_4500</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">12345_00</span> === <span class="number">1_234_500</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>小数和科学计数法也可以使用数值分隔符。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 小数</span></span><br><span class="line"><span class="number">0.000_001</span></span><br><span class="line"><span class="comment">// 科学计数法</span></span><br><span class="line"><span class="number">1e10_000</span></span><br></pre></td></tr></table></figure>

<p>数值分隔符有几个使用注意点。</p>
<ul>
<li>不能在数值的最前面（leading）或最后面（trailing）。</li>
<li>不能两个或两个以上的分隔符连在一起。</li>
<li>小数点的前后不能有分隔符。</li>
<li>科学计数法里面，表示指数的<code>e</code>或<code>E</code>前后不能有分隔符。</li>
</ul>
<p>下面的写法都会报错。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全部报错</span></span><br><span class="line">3_<span class="number">.141</span></span><br><span class="line"><span class="number">3.</span>_141</span><br><span class="line">1_e12</span><br><span class="line">1e_12</span><br><span class="line">123__456</span><br><span class="line">_1464301</span><br><span class="line">1464301_</span><br></pre></td></tr></table></figure>

<p>除了十进制，其他进制的数值也可以使用分隔符。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二进制</span></span><br><span class="line"><span class="number">0b1010_0001_1000_0101</span></span><br><span class="line"><span class="comment">// 十六进制</span></span><br><span class="line"><span class="number">0xA0_B0_C0</span></span><br></pre></td></tr></table></figure>

<p>注意，分隔符不能紧跟着进制的前缀<code>0b</code>、<code>0B</code>、<code>0o</code>、<code>0O</code>、<code>0x</code>、<code>0X</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line">0_b111111000</span><br><span class="line">0b_111111000</span><br></pre></td></tr></table></figure>

<p>下面三个将字符串转成数值的函数，不支持数值分隔符。主要原因是提案的设计者认为，数值分隔符主要是为了编码时书写数值的方便，而不是为了处理外部输入的数据。</p>
<ul>
<li>Number()</li>
<li>parseInt()</li>
<li>parseFloat()</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;123_456&#x27;</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;123_456&#x27;</span>) <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>

<h2 id="Math-signbit"><a href="#Math-signbit" class="headerlink" title="Math.signbit()"></a>Math.signbit()</h2><p><code>Math.sign()</code>用来判断一个值的正负，但是如果参数是<code>-0</code>，它会返回<code>-0</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">sign</span>(-<span class="number">0</span>) <span class="comment">// -0</span></span><br></pre></td></tr></table></figure>

<p>这导致对于判断符号位的正负，<code>Math.sign()</code>不是很有用。JavaScript 内部使用 64 位浮点数（国际标准 IEEE 754）表示数值，IEEE 754 规定第一位是符号位，<code>0</code>表示正数，<code>1</code>表示负数。所以会有两种零，<code>+0</code>是符号位为<code>0</code>时的零值，<code>-0</code>是符号位为<code>1</code>时的零值。实际编程中，判断一个值是<code>+0</code>还是<code>-0</code>非常麻烦，因为它们是相等的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0</span> === -<span class="number">0</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>目前，有一个<a target="_blank" rel="noopener" href="http://jfbastien.github.io/papers/Math.signbit.html">提案</a>，引入了<code>Math.signbit()</code>方法判断一个数的符号位是否设置了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">signbit</span>(<span class="number">2</span>) <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">signbit</span>(-<span class="number">2</span>) <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">signbit</span>(<span class="number">0</span>) <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">signbit</span>(-<span class="number">0</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>可以看到，该方法正确返回了<code>-0</code>的符号位是设置了的。</p>
<p>该方法的算法如下。</p>
<ul>
<li>如果参数是<code>NaN</code>，返回<code>false</code></li>
<li>如果参数是<code>-0</code>，返回<code>true</code></li>
<li>如果参数是负值，返回<code>true</code></li>
<li>其他情况返回<code>false</code></li>
</ul>
<h2 id="双冒号运算符"><a href="#双冒号运算符" class="headerlink" title="双冒号运算符"></a>双冒号运算符</h2><p>箭头函数可以绑定<code>this</code>对象，大大减少了显式绑定<code>this</code>对象的写法（<code>call</code>、<code>apply</code>、<code>bind</code>）。但是，箭头函数并不适用于所有场合，所以现在有一个<a target="_blank" rel="noopener" href="https://github.com/zenparsing/es-function-bind">提案</a>，提出了“函数绑定”（function bind）运算符，用来取代<code>call</code>、<code>apply</code>、<code>bind</code>调用。</p>
<p>函数绑定运算符是并排的两个冒号（<code>::</code>），双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即<code>this</code>对象），绑定到右边的函数上面。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">foo</span>::bar;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">bar.<span class="title function_">bind</span>(foo);</span><br><span class="line"></span><br><span class="line"><span class="attr">foo</span>::<span class="title function_">bar</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">bar.<span class="title function_">apply</span>(foo, <span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hasOwnProperty = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasOwn</span>(<span class="params">obj, key</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="attr">obj</span>::<span class="title function_">hasOwnProperty</span>(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> method = <span class="attr">obj</span>::obj.<span class="property">foo</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> method = ::obj.<span class="property">foo</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> log = ::<span class="variable language_">console</span>.<span class="property">log</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> log = <span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">bind</span>(<span class="variable language_">console</span>);</span><br></pre></td></tr></table></figure>

<p>如果双冒号运算符的运算结果，还是一个对象，就可以采用链式写法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; map, takeWhile, forEach &#125; <span class="keyword">from</span> <span class="string">&quot;iterlib&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getPlayers</span>()</span><br><span class="line">::<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="title function_">character</span>())</span><br><span class="line">::<span class="title function_">takeWhile</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="property">strength</span> &gt; <span class="number">100</span>)</span><br><span class="line">::<span class="title function_">forEach</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br></pre></td></tr></table></figure>

<h2 id="Realm-API"><a href="#Realm-API" class="headerlink" title="Realm API"></a>Realm API</h2><p><a target="_blank" rel="noopener" href="https://github.com/tc39/proposal-realms">Realm API</a> 提供沙箱功能（sandbox），允许隔离代码，防止那些被隔离的代码拿到全局对象。</p>
<p>以前，经常使用<code>&lt;iframe&gt;</code>作为沙箱。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> globalOne = <span class="variable language_">window</span>;</span><br><span class="line"><span class="keyword">let</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe);</span><br><span class="line"><span class="keyword">const</span> globalTwo = iframe.<span class="property">contentWindow</span>;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>&lt;iframe&gt;</code>的全局对象是独立的（<code>iframe.contentWindow</code>）。Realm API 可以取代这个功能。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> globalOne = <span class="variable language_">window</span>;</span><br><span class="line"><span class="keyword">const</span> globalTwo = <span class="keyword">new</span> <span class="title class_">Realm</span>().<span class="property">global</span>;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>Realm API</code>单独提供了一个全局对象<code>new Realm().global</code>。</p>
<p>Realm API 提供一个<code>Realm()</code>构造函数，用来生成一个 Realm 对象。该对象的<code>global</code>属性指向一个新的顶层对象，这个顶层对象跟原始的顶层对象类似。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> globalOne = <span class="variable language_">window</span>;</span><br><span class="line"><span class="keyword">const</span> globalTwo = <span class="keyword">new</span> <span class="title class_">Realm</span>().<span class="property">global</span>;</span><br><span class="line"></span><br><span class="line">globalOne.<span class="title function_">evaluate</span>(<span class="string">&#x27;1 + 2&#x27;</span>) <span class="comment">// 3</span></span><br><span class="line">globalTwo.<span class="title function_">evaluate</span>(<span class="string">&#x27;1 + 2&#x27;</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，Realm 生成的顶层对象的<code>evaluate()</code>方法，可以运行代码。</p>
<p>下面的代码可以证明，Realm 顶层对象与原始顶层对象是两个对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = globalOne.<span class="title function_">evaluate</span>(<span class="string">&#x27;[1,2,3]&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> a2 = globalTwo.<span class="title function_">evaluate</span>(<span class="string">&#x27;[1,2,3]&#x27;</span>);</span><br><span class="line">a1.<span class="property"><span class="keyword">prototype</span></span> === a2.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// false</span></span><br><span class="line">a1 <span class="keyword">instanceof</span> globalTwo.<span class="property">Array</span>; <span class="comment">// false</span></span><br><span class="line">a2 <span class="keyword">instanceof</span> globalOne.<span class="property">Array</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，Realm 沙箱里面的数组的原型对象，跟原始环境里面的数组是不一样的。</p>
<p>Realm 沙箱里面只能运行 ECMAScript 语法提供的 API，不能运行宿主环境提供的 API。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">globalTwo.<span class="title function_">evaluate</span>(<span class="string">&#x27;console.log(1)&#x27;</span>)</span><br><span class="line"><span class="comment">// throw an error: console is undefined</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，Realm 沙箱里面没有<code>console</code>对象，导致报错。因为<code>console</code>不是语法标准，是宿主环境提供的。</p>
<p>如果要解决这个问题，可以使用下面的代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">globalTwo.<span class="property">console</span> = globalOne.<span class="property">console</span>;</span><br></pre></td></tr></table></figure>

<p><code>Realm()</code>构造函数可以接受一个参数对象，该参数对象的<code>intrinsics</code>属性可以指定 Realm 沙箱继承原始顶层对象的方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> r1 = <span class="keyword">new</span> <span class="title class_">Realm</span>();</span><br><span class="line">r1.<span class="property">global</span> === <span class="variable language_">this</span>;</span><br><span class="line">r1.<span class="property">global</span>.<span class="property">JSON</span> === <span class="title class_">JSON</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> r2 = <span class="keyword">new</span> <span class="title class_">Realm</span>(&#123; <span class="attr">intrinsics</span>: <span class="string">&#x27;inherit&#x27;</span> &#125;);</span><br><span class="line">r2.<span class="property">global</span> === <span class="variable language_">this</span>; <span class="comment">// false</span></span><br><span class="line">r2.<span class="property">global</span>.<span class="property">JSON</span> === <span class="title class_">JSON</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，正常情况下，沙箱的<code>JSON</code>方法不同于原始的<code>JSON</code>对象。但是，<code>Realm()</code>构造函数接受<code>&#123; intrinsics: &#39;inherit&#39; &#125;</code>作为参数以后，就会继承原始顶层对象的方法。</p>
<p>用户可以自己定义<code>Realm</code>的子类，用来定制自己的沙箱。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FakeWindow</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Realm</span> &#123;</span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">init</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable language_">global</span> = <span class="variable language_">this</span>.<span class="property">global</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">global</span>.<span class="property">document</span> = <span class="keyword">new</span> <span class="title class_">FakeDocument</span>(...);</span><br><span class="line">    <span class="variable language_">global</span>.<span class="property">alert</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(fakeAlert, &#123; ... &#125;);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>FakeWindow</code>模拟了一个假的顶层对象<code>window</code>。</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="#!命令"></a><code>#!</code>命令</h2><p>Unix 的命令行脚本都支持<code>#!</code>命令，又称为 Shebang 或 Hashbang。这个命令放在脚本的第一行，用来指定脚本的执行器。</p>
<p>比如 Bash 脚本的第一行。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br></pre></td></tr></table></figure>

<p>Python 脚本的第一行。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br></pre></td></tr></table></figure>

<p>现在有一个<a target="_blank" rel="noopener" href="https://github.com/tc39/proposal-hashbang">提案</a>，为 JavaScript 脚本引入了<code>#!</code>命令，写在脚本文件或者模块文件的第一行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写在脚本文件第一行</span></span><br><span class="line">#!<span class="regexp">/usr/</span>bin/env node</span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写在模块文件第一行</span></span><br><span class="line">#!<span class="regexp">/usr/</span>bin/env node</span><br><span class="line"><span class="keyword">export</span> &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>有了这一行以后，Unix 命令行就可以直接执行脚本。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以前执行脚本的方式</span></span><br><span class="line">$ node hello.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># hashbang 的方式</span></span><br><span class="line">$ hello.js</span><br></pre></td></tr></table></figure>

<p>对于 JavaScript 引擎来说，会把<code>#!</code>理解成注释，忽略掉这一行。</p>
<h2 id="import-meta"><a href="#import-meta" class="headerlink" title="import.meta"></a>import.meta</h2><p>开发者使用一个模块时，有时需要知道模板本身的一些信息（比如模块的路径）。现在有一个<a target="_blank" rel="noopener" href="https://github.com/tc39/proposal-import-meta">提案</a>，为 import 命令添加了一个元属性<code>import.beta</code>，返回当前模块的元信息。</p>
<p><code>import.meta</code>只能在模块内部使用，如果在模块外部使用会报错。</p>
<p>这个属性返回一个对象，该对象的各种属性就是当前运行的脚本的元信息。具体包含哪些属性，标准没有规定，由各个运行环境自行决定。一般来说，<code>import.meta</code>至少会有下面两个属性。</p>
<p><strong>（1）import.meta.url</strong></p>
<p><code>import.meta.url</code>返回当前模块的 URL 路径。举例来说，当前模块主文件的路径是<code>https://foo.com/main.js</code>，<code>import.meta.url</code>就返回这个路径。如果模块里面还有一个数据文件<code>data.txt</code>，那么就可以用下面的代码，获取这个数据文件的路径。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;data.txt&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>)</span><br></pre></td></tr></table></figure>

<p>注意，Node.js 环境中，<code>import.meta.url</code>返回的总是本地路径，即是<code>file:URL</code>协议的字符串，比如<code>file:///home/user/foo.js</code>。</p>
<p><strong>（2）import.meta.scriptElement</strong></p>
<p><code>import.meta.scriptElement</code>是浏览器特有的元属性，返回加载模块的那个<code>&lt;script&gt;</code>元素，相当于<code>document.currentScript</code>属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HTML 代码为</span></span><br><span class="line"><span class="comment">// &lt;script type=&quot;module&quot; src=&quot;my-module.js&quot; data-foo=&quot;abc&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// my-module.js 内部执行下面的代码</span></span><br><span class="line"><span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">scriptElement</span>.<span class="property">dataset</span>.<span class="property">foo</span></span><br><span class="line"><span class="comment">// &quot;abc&quot;</span></span><br></pre></td></tr></table></figure>


      
    </div>
    <footer class="article-footer">
      <a data-url="http://example.com/pages/7188882b8d65af1b" data-id="cm2n1iutb00209sr3e8e92k7m" data-title="最新提案" class="article-share-link"><span class="fa fa-share">Share</span></a>
      
      
      
    </footer>
  </div>
  
    
<nav id="article-nav">
  
    <a href="/2024/10/11/08.%E6%95%B0%E7%BB%84/" id="article-nav-newer" class="article-nav-link-wrap">
      <strong class="article-nav-caption">Newer</strong>
      <div class="article-nav-title">
        
          (no title)
        
      </div>
    </a>
  
  
    <a href="/pages/e97bc1e5626b082c" id="article-nav-older" class="article-nav-link-wrap">
      <strong class="article-nav-caption">Older</strong>
      <div class="article-nav-title">装饰器</div>
    </a>
  
</nav>

  
</article>


</section>
        
          <aside id="sidebar">
  
    
  <div class="widget-wrap">
    <h3 class="widget-title">Categories</h3>
    <div class="widget">
      <ul class="category-list"><li class="category-list-item"><a class="category-list-link" href="/categories/%E3%80%8AES6-%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/">《ES6 教程》笔记</a></li><li class="category-list-item"><a class="category-list-link" href="/categories/%E3%80%8AJavaScript%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/">《JavaScript教程》笔记</a></li></ul>
    </div>
  </div>


  
    

  
    
  
    
  <div class="widget-wrap">
    <h3 class="widget-title">Archives</h3>
    <div class="widget">
      <ul class="archive-list"><li class="archive-list-item"><a class="archive-list-link" href="/archives/2024/10/">October 2024</a></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2020/02/">February 2020</a></li><li class="archive-list-item"><a class="archive-list-link" href="/archives/2020/01/">January 2020</a></li></ul>
    </div>
  </div>


  
    
  <div class="widget-wrap">
    <h3 class="widget-title">Recent Posts</h3>
    <div class="widget">
      <ul>
        
          <li>
            <a href="/2024/10/24/hello-world/">Hello World</a>
          </li>
        
          <li>
            <a href="/2024/10/11/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8Bnew%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/">(no title)</a>
          </li>
        
          <li>
            <a href="/2024/10/11/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8Bcall%E5%92%8Capply%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/">(no title)</a>
          </li>
        
          <li>
            <a href="/2024/10/11/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8Bbind%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/">(no title)</a>
          </li>
        
          <li>
            <a href="/2024/10/11/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/">(no title)</a>
          </li>
        
      </ul>
    </div>
  </div>

  
</aside>
        
      </div>
      <footer id="footer">
  
  <div class="outer">
    <div id="footer-info" class="inner">
      
      &copy; 2024 John Doe<br>
      Powered by <a href="https://hexo.io/" target="_blank">Hexo</a>
    </div>
  </div>
</footer>

    </div>
    <nav id="mobile-nav">
  
    <a href="/" class="mobile-nav-link">Home</a>
  
    <a href="/archives" class="mobile-nav-link">Archives</a>
  
</nav>
    


<script src="/js/jquery-3.6.4.min.js"></script>



  
<script src="/fancybox/jquery.fancybox.min.js"></script>




<script src="/js/script.js"></script>





  </div>
</body>
</html>